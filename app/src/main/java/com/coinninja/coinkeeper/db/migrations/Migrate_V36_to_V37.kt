package com.coinninja.coinkeeper.db.migrations

import android.database.sqlite.SQLiteDatabase
import com.coinninja.coinkeeper.db.AbstractMigration
import com.coinninja.coinkeeper.db.Migration
import org.greenrobot.greendao.database.Database

class Migrate_V36_to_V37 : AbstractMigration() {
    override val previousMigration: Migration = Migrate_V35_to_V36()
    override val migratedVersion: Int = 37
    override val targetVersion: Int = 36

    override fun applyMigration(db: Database, currentVersion: Int) {
        db.execSQL("CREATE TABLE IF NOT EXISTS `ACCOUNT` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER, `CN_USER_ID` TEXT NOT NULL, `STATUS` INTEGER NOT NULL, `PHONE_NUMBER_HASH` TEXT NOT NULL, `PHONE_NUMBER` TEXT NOT NULL, `VERIFICATION_TTL` INTEGER NOT NULL, `IS_PRIVATE` INTEGER NOT NULL, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE  INDEX `ACCOUNT_WALLET_ID` ON `ACCOUNT` (`WALLET_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `ADDRESS` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER NOT NULL, `ADDRESS` TEXT NOT NULL, `INDEX` INTEGER NOT NULL, `CHANGE_INDEX` INTEGER NOT NULL, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE  INDEX `ADDRESS__WALLET_ID` ON `ADDRESS` (`WALLET_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `ADDRESS__ADDRESS` ON `ADDRESS` (`ADDRESS`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `BROADCAST_BTC_INVITE` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `BROADCAST_TX_ID` TEXT NOT NULL, `BTC_STATE` INTEGER NOT NULL, `BROADCAST_TO_ADDRESS` TEXT NOT NULL, `INVITE_SERVER_ID` TEXT NOT NULL, `INVITE_TRANSACTION_SUMMARY_ID` INTEGER, FOREIGN KEY(`INVITE_TRANSACTION_SUMMARY_ID`) REFERENCES `INVITE_TRANSACTION_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE UNIQUE INDEX `BROADCAST_BTC_INVITE__INVITE_TRANSACTION_SUMMARY_ID` ON `BROADCAST_BTC_INVITE` (`INVITE_TRANSACTION_SUMMARY_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `BROADCAST_BTC_INVITE__BROADCAST_TX_ID` ON `BROADCAST_BTC_INVITE` (`BROADCAST_TX_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `CONTACT` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `PHONE_NUMBER_HASH` TEXT NOT NULL)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `DROPBIT_ME_IDENTITY` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `TYPE` INTEGER NOT NULL, `IDENTITY` TEXT NOT NULL, `SERVER_ID` TEXT NOT NULL, `HANDLE` TEXT NOT NULL, `HASH` TEXT NOT NULL, `STATUS` INTEGER NOT NULL, `ACCOUNT_ID` INTEGER, FOREIGN KEY(`ACCOUNT_ID`) REFERENCES `ACCOUNT`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE  INDEX `DROPBIT_ME_IDENTITY__ACCOUNT_ID` ON `DROPBIT_ME_IDENTITY` (`ACCOUNT_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `DROPBIT_ME_IDENTITY__SERVER_ID` ON `DROPBIT_ME_IDENTITY` (`SERVER_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `EXTERNAL_NOTIFICATION` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `MESSAGE` TEXT NOT NULL, `EXTRA_DATA` TEXT NOT NULL)")
        db.execSQL("CREATE  INDEX `EXTERNAL_NOTIFICATION__MESSAGE` ON `EXTERNAL_NOTIFICATION` (`MESSAGE`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `FUNDING_STAT` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `ADDRESS_ID` INTEGER, `WALLET_ID` INTEGER, `TSID` INTEGER, `ADDR` TEXT NOT NULL, `POSITION` INTEGER NOT NULL, `VALUE` INTEGER NOT NULL, `TX_TIME` INTEGER NOT NULL, `STATE` INTEGER NOT NULL, `FUNDED_TRANSACTION` TEXT NOT NULL, FOREIGN KEY(`ADDRESS_ID`) REFERENCES `ADDRESS`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`TSID`) REFERENCES `TRANSACTION_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        db.execSQL("CREATE  INDEX `FUNDING_STAT__ADDRESS_ID` ON `FUNDING_STAT` (`ADDRESS_ID`)")
        db.execSQL("CREATE  INDEX `FUNDING_STAT__WALLET_ID` ON `FUNDING_STAT` (`WALLET_ID`)")
        db.execSQL("CREATE  INDEX `FUNDING_STAT__TSID` ON `FUNDING_STAT` (`TSID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `INTERNAL_NOTIFICATION` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER, `MESSAGE` TEXT NOT NULL, `HAS_BEEN_SEEN` INTEGER NOT NULL, `MESSAGE_LEVEL` INTEGER NOT NULL, `SERVER_UUID` TEXT NOT NULL, `CLICK_ACTION` TEXT, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `INTERNAL_NOTIFICATION__WALLET_ID` ON `INTERNAL_NOTIFICATION` (`WALLET_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `INVITE_TRANSACTION_SUMMARY` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `TO_USER_IDENTITY_ID` INTEGER, `FROM_USER_IDENTITY_ID` INTEGER, `WALLET_ID` INTEGER, `TRANSACTIONS_INVITES_SUMMARY_ID` INTEGER, `TYPE` INTEGER NOT NULL, `BTC_STATE` INTEGER NOT NULL, `SERVER_ID` TEXT NOT NULL, `BTC_TRANSACTION_ID` TEXT NOT NULL, `SENT_DATE` INTEGER NOT NULL, `ADDRESS` TEXT NOT NULL, `PUBKEY` TEXT NOT NULL, `VALUE_SATOSHIS` INTEGER NOT NULL, `VALUE_FEES_SATOSHIS` INTEGER NOT NULL, `HISTORIC_VALUE` INTEGER NOT NULL, FOREIGN KEY(`TO_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`FROM_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`TRANSACTIONS_INVITES_SUMMARY_ID`) REFERENCES `TRANSACTIONS_INVITES_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `INVITE_TRANSACTION_SUMMARY__TO_USER_IDENTITY_ID` ON `INVITE_TRANSACTION_SUMMARY` (`TO_USER_IDENTITY_ID`)")
        db.execSQL("CREATE  INDEX `INVITE_TRANSACTION_SUMMARY__FROM_USER_IDENTITY_ID` ON `INVITE_TRANSACTION_SUMMARY` (`FROM_USER_IDENTITY_ID`)")
        db.execSQL("CREATE  INDEX `INVITE_TRANSACTION_SUMMARY__TRANSACTIONS_INVITES_SUMMARY_ID` ON `INVITE_TRANSACTION_SUMMARY` (`TRANSACTIONS_INVITES_SUMMARY_ID`)")
        db.execSQL("CREATE  INDEX `INVITE_TRANSACTION_SUMMARY__WALLET_ID` ON `INVITE_TRANSACTION_SUMMARY` (`WALLET_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `LIGHTNING_ACCOUNT` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `SERVER_ID` TEXT NOT NULL, `ADDRESS` TEXT, `BALANCE` INTEGER NOT NULL, `PENDING_IN` INTEGER NOT NULL, `PENDING_OUT` INTEGER NOT NULL, `CREATED_AT` TEXT NOT NULL, `UPDATED_AT` TEXT NOT NULL, `IS_LOCKED` INTEGER)")
        db.execSQL("CREATE UNIQUE INDEX `LIGHTNING_ACCOUNT__SERVER_ID` ON `LIGHTNING_ACCOUNT` (`SERVER_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `LIGHTNING_INVOICE` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `SERVER_ID` TEXT NOT NULL, `ACCOUNT_ID` INTEGER, `CREATED_AT` TEXT, `UPDATED_AT` TEXT, `EXPIRES_AT` TEXT, `STATUS` INTEGER, `TYPE` INTEGER, `DIRECTION` INTEGER, `GENERATED` INTEGER NOT NULL, `VALUE` INTEGER NOT NULL, `NETWORK_FEE` INTEGER NOT NULL, `PROCESSING_FEE` INTEGER NOT NULL, `ADD_INDEX` INTEGER, `MEMO` TEXT NOT NULL, `REQUEST` TEXT NOT NULL, `ERROR` TEXT NOT NULL, `IS_HIDDEN` INTEGER NOT NULL, FOREIGN KEY(`ACCOUNT_ID`) REFERENCES `LIGHTNING_ACCOUNT`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `LIGHTNING_INVOICE__ACCOUNT_ID` ON `LIGHTNING_INVOICE` (`ACCOUNT_ID`)");
        db.execSQL("CREATE UNIQUE INDEX `LIGHTNING_INVOICE__SERVER_ID` ON `LIGHTNING_INVOICE` (`SERVER_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `TRANSACTION_SUMMARY` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER, `TRANSACTIONS_INVITES_SUMMARY_ID` INTEGER, `TXID` TEXT NOT NULL, `SOUGHT_NOTIFICATION` INTEGER NOT NULL, `FEE` INTEGER, `TX_TIME` INTEGER, `NUM_CONFIRMATIONS` INTEGER NOT NULL, `BLOCKHASH` TEXT NOT NULL, `NUM_INPUTS` INTEGER NOT NULL, `NUM_OUTPUTS` INTEGER NOT NULL, `BLOCKHEIGHT` INTEGER, `HISTORIC_PRICE` INTEGER NOT NULL, `TRANSACTION_NOTIFICATION_ID` INTEGER, `MEM_POOL_STATE` INTEGER NOT NULL, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`TRANSACTIONS_INVITES_SUMMARY_ID`) REFERENCES `TRANSACTIONS_INVITES_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `TRANSACTION__WALLET_ID` ON `TRANSACTION_SUMMARY` (`WALLET_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `TRANSACTION__TRANSACTIONS_INVITES_SUMMARY_ID` ON `TRANSACTION_SUMMARY` (`TRANSACTIONS_INVITES_SUMMARY_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `TRANSACTION__TXID` ON `TRANSACTION_SUMMARY` (`TXID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `TRANSACTIONS_INVITES_SUMMARY` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `INVITE_SUMMARY_ID` INTEGER, `TRANSACTION_SUMMARY_ID` INTEGER, `TO_USER_IDENTITY_ID` INTEGER, `FROM_USER_IDENTITY_ID` INTEGER, `INVITE_TIME` INTEGER NOT NULL, `BTC_TX_TIME` INTEGER NOT NULL, `TRANSACTION_TX_ID` TEXT, `INVITE_TX_ID` TEXT, FOREIGN KEY(`TRANSACTION_SUMMARY_ID`) REFERENCES `TRANSACTION_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`INVITE_SUMMARY_ID`) REFERENCES `INVITE_TRANSACTION_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`TO_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`FROM_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE UNIQUE INDEX `TRANSACTIONS_INVITES_SUMMARY__TRANSACTION_SUMMARY_ID` ON `TRANSACTIONS_INVITES_SUMMARY` (`TRANSACTION_SUMMARY_ID`)")
        db.execSQL("CREATE UNIQUE INDEX `TRANSACTIONS_INVITES_SUMMARY__INVITE_SUMMARY_ID` ON `TRANSACTIONS_INVITES_SUMMARY` (`INVITE_SUMMARY_ID`)")
        db.execSQL("CREATE  INDEX `TRANSACTIONS_INVITES_SUMMARY__TO_USER_IDENTITY_ID` ON `TRANSACTIONS_INVITES_SUMMARY` (`TO_USER_IDENTITY_ID`)")
        db.execSQL("CREATE  INDEX `TRANSACTIONS_INVITES_SUMMARY__FROM_USER_IDENTITY_ID` ON `TRANSACTIONS_INVITES_SUMMARY` (`FROM_USER_IDENTITY_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `TRANSACTION_NOTIFICATION` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `MEMO` TEXT NOT NULL, `IS_SHARED` INTEGER NOT NULL, `AMOUNT` INTEGER NOT NULL, `AMOUNT_CURRENCY` TEXT NOT NULL, `TXID` TEXT NOT NULL, `TO_USER_IDENTITY_ID` INTEGER, `FROM_USER_IDENTITY_ID` INTEGER, FOREIGN KEY(`TO_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`FROM_USER_IDENTITY_ID`) REFERENCES `USER_IDENTITY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `TRANSACTION_NOTIFICATION__TO_USER_IDENTITY_ID` ON `TRANSACTION_NOTIFICATION` (`TO_USER_IDENTITY_ID`)")
        db.execSQL("CREATE  INDEX `TRANSACTION_NOTIFICATION__FROM_USER_IDENTITY_ID` ON `TRANSACTION_NOTIFICATION` (`FROM_USER_IDENTITY_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `TARGET_STAT` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER, `ADDRESS_ID` INTEGER, `TSID` INTEGER, `ADDR` TEXT NOT NULL, `POSITION` INTEGER NOT NULL, `VALUE` INTEGER NOT NULL, `TX_TIME` INTEGER NOT NULL, `FUNDING_ID` INTEGER, `STATE` INTEGER NOT NULL, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`ADDRESS_ID`) REFERENCES `ADDRESS`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`TSID`) REFERENCES `TRANSACTION_SUMMARY`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION , FOREIGN KEY(`FUNDING_ID`) REFERENCES `FUNDING_STAT`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `TARGET_STAT__WALLET_ID` ON `TARGET_STAT` (`WALLET_ID`)")
        db.execSQL("CREATE  INDEX `TARGET_STAT__ADDRESS_ID` ON `TARGET_STAT` (`ADDRESS_ID`)")
        db.execSQL("CREATE  INDEX `TARGET_STAT__TSID` ON `TARGET_STAT` (`TSID`)")
        db.execSQL("CREATE  INDEX `TARGET_STAT__FUNDING_ID` ON `TARGET_STAT` (`FUNDING_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `USER` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `PIN` TEXT NOT NULL, `UID` TEXT NOT NULL, `COMPLETED_TRAINING` INTEGER NOT NULL, `LOCKED_UNTIL_TIME` INTEGER NOT NULL)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `USER_IDENTITY` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `IDENTITY` TEXT NOT NULL, `TYPE` INTEGER NOT NULL, `DISPLAY_NAME` TEXT NOT NULL, `HANDLE` TEXT NOT NULL, `HASH` TEXT NOT NULL, `AVATAR` TEXT NOT NULL)")
        db.execSQL("CREATE UNIQUE INDEX `USER_IDENTITY__IDENTITY` ON `USER_IDENTITY` (`IDENTITY`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `WALLET` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `HD_INDEX` INTEGER NOT NULL, `USER_ID` INTEGER NOT NULL, `LAST_SYNC` INTEGER NOT NULL, `INTERNAL_INDEX` INTEGER NOT NULL, `EXTERNAL_INDEX` INTEGER NOT NULL, `BALANCE` INTEGER NOT NULL, `SPENDABLE_BALANCE` INTEGER NOT NULL, `BLOCK_TIP` INTEGER NOT NULL, `LAST_USDPRICE` INTEGER NOT NULL, `PURPOSE` INTEGER NOT NULL, `COIN_TYPE` INTEGER NOT NULL, `ACCOUNT_INDEX` INTEGER NOT NULL)")
        db.execSQL("CREATE TABLE IF NOT EXISTS `WORD` (`_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `WALLET_ID` INTEGER, `WORD` TEXT NOT NULL, `SORT_ORDER` INTEGER NOT NULL, FOREIGN KEY(`WALLET_ID`) REFERENCES `WALLET`(`_id`) ON UPDATE NO ACTION ON DELETE NO ACTION )")
        db.execSQL("CREATE  INDEX `WORD__WALLET_ID` ON `WORD` (`WALLET_ID`)")
        db.execSQL("CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)")
        db.execSQL("INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, 'a434d6abf4dc05cef3579fe73ee163e8')")
    }
}

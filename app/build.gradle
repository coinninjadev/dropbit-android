apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: "com.github.triplet.play"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'de.felixschulze.gradle.hockeyapp'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: 'com.adarshr.test-logger'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the projectDir folder.
def keystorePropertiesFile = rootProject.file("${project.projectDir}/keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def versionMajor = 3
def versionMinor = 0
def versionPatch = System.getenv("VERSION_PATCH") ? System.getenv("VERSION_PATCH") : 0
def APP_VERSION = System.getenv("APP_VERSION") ? Integer.parseInt(System.getenv("APP_VERSION")) : 10480
def hockeyAppApiToken = System.getenv("HOCKEY_APP_API_TOKEN") ? System.getenv("HOCKEY_APP_API_TOKEN") : HOCKEY_APP_API_TOKEN
def ANALYTICS_TOKEN = System.getenv("ANALYTICS_TOKEN") ? System.getenv("ANALYTICS_TOKEN") : ANALYTICS_TOKEN
def COIN_NINJA_API_BASE__STAGING = System.getenv("COIN_NINJA_API_BASE__STAGING") ? System.getenv("COIN_NINJA_API_BASE__STAGING") : COIN_NINJA_API_BASE__STAGING
def COIN_NINJA_API_BASE = System.getenv("COIN_NINJA_API_BASE") ? System.getenv("COIN_NINJA_API_BASE") : COIN_NINJA_API_BASE
def DEFAULT_SALT = System.getenv("DEFAULT_SALT") ? System.getenv("DEFAULT_SALT") : DEFAULT_SALT
def ANALYTICS_TOKEN_DEBUG = System.getenv("ANALYTICS_TOKEN_DEBUG") ? System.getenv("ANALYTICS_TOKEN_DEBUG") : ANALYTICS_TOKEN_DEBUG
def DEBUG_FCM_APP_KEY = System.getenv("DEBUG_FCM_APP_KEY") ? System.getenv("DEBUG_FCM_APP_KEY") : DEBUG_FCM_APP_KEY
def PROD_FCM_APP_KEY = System.getenv("PROD_FCM_APP_KEY") ? System.getenv("PROD_FCM_APP_KEY") : PROD_FCM_APP_KEY
def PHONE_HASH_SALT = System.getenv("PHONE_HASH_SALT") ? System.getenv("PHONE_HASH_SALT") : PHONE_HASH_SALT
def PHONE_HASH_ITERATIONS = System.getenv("PHONE_HASH_ITERATIONS") ? System.getenv("PHONE_HASH_ITERATIONS") : PHONE_HASH_ITERATIONS

kapt {
    generateStubs = true
}

greendao {
    schemaVersion 36
}

hockeyapp {
    apiToken = "${hockeyAppApiToken}"
}

play {
    track 'internal'
    resolutionStrategy = "auto"
    serviceAccountCredentials file("${project.rootDir}/google_play.json")
}

testlogger {
    //https://github.com/radarsh/gradle-test-logger-plugin
    theme 'mocha'
    slowThreshold 5000
    showPassed false
    showSkipped false
    showPassedStandardStreams false
    showSkippedStandardStreams false
}


android {
    androidExtensions {
        experimental = true
    }

    buildToolsVersion rootProject.buildToolsVersion
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.coinninja.coinkeeper"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode APP_VERSION
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        buildConfigField "int", "AUTHENTICATION_TIME_OUT_MS", "30000"
        buildConfigField "long", "DUST_AMOUNT_SATOSHIS", "500"
        buildConfigField "int", "NUM_ADDRESSES_AHEAD", "10"
        buildConfigField "String", "DEFAULT_SALT", "\"${DEFAULT_SALT}\""
        buildConfigField "String", "PHONE_HASH_SALT", "\"${PHONE_HASH_SALT}\""
        buildConfigField "int", "PHONE_HASH_ITERATIONS", "${PHONE_HASH_ITERATIONS}"
        buildConfigField "int", "COIN_TYPE", "0"
        buildConfigField "int", "PURPOSE", "49"
        buildConfigField "int", "ACCOUNT_INDEX", "0"
    }

    signingConfigs {
        release {
            storeFile file("${project.projectDir}/${keystoreProperties['RELEASE_STORE_FILE']}")
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
            keyAlias keystoreProperties['RELEASE_KEY_ALIAS']
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
            buildConfigField "String", "ANALYTICS_TOKEN", "\"${ANALYTICS_TOKEN_DEBUG}\""
            buildConfigField "boolean", "CN_DB_ENCRYPTION_ENABLED", "false"
            applicationIdSuffix ".debug"
            manifestPlaceholders = ["APP_LINKING_HOST": "dev.coinninja.net"]
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "ANALYTICS_TOKEN", "\"${ANALYTICS_TOKEN}\""
            buildConfigField "boolean", "CN_DB_ENCRYPTION_ENABLED", "true"
            testCoverageEnabled false
            manifestPlaceholders = ["APP_LINKING_HOST": "coinninja.com"]
            resValue "string", "app_version", "${defaultConfig.versionName}"
        }
    }

    flavorDimensions "dropbit"
    productFlavors {
        staging {
            dimension "dropbit"
            applicationId "com.coinninja.staging.coinkeeper"
            signingConfig signingConfigs.release
            buildConfigField "String", "COIN_NINJA_API_BASE", "\"${COIN_NINJA_API_BASE__STAGING}\""
            buildConfigField "boolean", "IS_PRODUCTION", "false"
            buildConfigField "int", "COIN_TYPE", "1"
            versionNameSuffix "-staging"
            buildConfigField "String", "FCM_APPLICATION_KEY", "\"${DEBUG_FCM_APP_KEY}\""
        }

        production {
            dimension "dropbit"
            applicationId "com.coinninja.coinkeeper"
            signingConfig signingConfigs.release
            buildConfigField "String", "COIN_NINJA_API_BASE", "\"${COIN_NINJA_API_BASE}\""
            buildConfigField "boolean", "IS_PRODUCTION", "true"
            buildConfigField "String", "FCM_APPLICATION_KEY", "\"${PROD_FCM_APP_KEY}\""
        }

    }

    playConfigs {
        production {
            enabled = true
        }

    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
        htmlReport true
        noLines false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
            all {
                systemProperty "robolectric.logging.enabled", false
                jvmArgs rootProject.jvmArgs
            }
        }
        testlogger {
            theme 'standard-parallel' // task level
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "debug") {
        def aptOutputDir = new File(buildDir, "generated/source/apt/${variant.unitTestVariant.dirName}")
        variant.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', "*.aar"], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(":twitter")
    implementation project(":common")

    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation 'com.squareup.picasso:picasso:2.71828'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation group: 'org.cryptonode.jncryptor', name: 'jncryptor', version: '1.0.1'
    implementation "com.coinninja.libbitcoin:libbitcoinbindings-release:1.2.0"
    implementation 'com.coinninja.messaging:cn_messaging-release:1.1.2'

    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta2"

    implementation "androidx.appcompat:appcompat:1.1.rc01"
    implementation "com.google.android.material:material:$rootProject.material_version"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'

    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$rootProject.retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'


    implementation "com.journeyapps:zxing-android-embedded:3.3.0"
    implementation 'com.google.zxing:core:3.3.3'
    implementation 'com.google.zxing:javase:3.3.3'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.9.4' // Keep 8.9.4
    implementation 'commons-codec:commons-codec:20041127.091804'
    implementation "com.madgag.spongycastle:core:1.58.0.0"
    implementation "com.madgag.spongycastle:bcpkix-jdk15on:1.58.0.0"
    implementation 'com.mixpanel.android:mixpanel-android:5.6.0'
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.firebase:firebase-core:17.0.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.squareup.picasso:picasso:2.71828"

    testImplementation "org.json:json:20180813"
    testImplementation "com.squareup.okhttp3:mockwebserver:3.14.1"

    testImplementation 'org.mockito4kotlin:annotation:0.3.0'
    testImplementation "androidx.test:core:1.2.0"
    testImplementation "androidx.test.ext:junit:1.1.1"
    testImplementation "androidx.test.ext:truth:1.2.0"
    testImplementation "androidx.test:rules:$rootProject.androidx_runner_version"
    testImplementation "androidx.test:runner:$rootProject.androidx_runner_version"
    testImplementation "com.google.truth:truth:0.42"
    testImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_core_version"
    implementation "androidx.fragment:fragment-testing:$rootProject.androidx_fragment_testing_version"
    //--https://issuetracker.google.com/issues/122321150
    testImplementation "org.robolectric:robolectric:$rootProject.robolectric_version"
    testImplementation "androidx.test.espresso:espresso-intents:3.2.0"

    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.2"
}

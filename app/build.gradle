apply plugin: 'com.android.application'
apply plugin: 'com.github.ksoichiro.console.reporter'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'de.undercouch.download'
apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the projectDir folder.
def keystorePropertiesFile = rootProject.file("${project.projectDir}/keystore.properties")
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def versionMajor = 1
def versionMinor = 4
def versionPatch = System.getenv("VERSION_PATCH") ? System.getenv("VERSION_PATCH") : 0
def APP_VERSION = System.getenv("APP_VERSION") ? Integer.parseInt(System.getenv("APP_VERSION")) : 10472
def hockeyAppApiToken = System.getenv("HOCKEY_APP_API_TOKEN") ? System.getenv("HOCKEY_APP_API_TOKEN") : HOCKEY_APP_API_TOKEN
def ANALYTICS_TOKEN = System.getenv("ANALYTICS_TOKEN") ? System.getenv("ANALYTICS_TOKEN") : ANALYTICS_TOKEN
def COIN_NINJA_API_BASE__STAGING = System.getenv("COIN_NINJA_API_BASE__STAGING") ? System.getenv("COIN_NINJA_API_BASE__STAGING") : COIN_NINJA_API_BASE__STAGING
def COIN_NINJA_API_BASE = System.getenv("COIN_NINJA_API_BASE") ? System.getenv("COIN_NINJA_API_BASE") : COIN_NINJA_API_BASE
def DEFAULT_SALT = System.getenv("DEFAULT_SALT") ? System.getenv("DEFAULT_SALT") : DEFAULT_SALT
def ANALYTICS_TOKEN_DEBUG = System.getenv("ANALYTICS_TOKEN_DEBUG") ? System.getenv("ANALYTICS_TOKEN_DEBUG") : ANALYTICS_TOKEN_DEBUG
def DEBUG_FCM_APP_KEY = System.getenv("DEBUG_FCM_APP_KEY") ? System.getenv("DEBUG_FCM_APP_KEY") : DEBUG_FCM_APP_KEY
def PROD_FCM_APP_KEY = System.getenv("PROD_FCM_APP_KEY") ? System.getenv("PROD_FCM_APP_KEY") : PROD_FCM_APP_KEY
def PHONE_HASH_SALT = System.getenv("PHONE_HASH_SALT") ? System.getenv("PHONE_HASH_SALT") : PHONE_HASH_SALT
def PHONE_HASH_ITERATIONS = System.getenv("PHONE_HASH_ITERATIONS") ? System.getenv("PHONE_HASH_ITERATIONS") : PHONE_HASH_ITERATIONS


greendao {
    schemaVersion 30
}

apply plugin: 'de.felixschulze.gradle.hockeyapp'
hockeyapp {
    apiToken = "${hockeyAppApiToken}"
}

// documentation for plugin https://github.com/Triple-T/gradle-play-publisher#initial-play-store-upload
play {
    track 'internal'
    untrackOld true
    jsonFile file("${project.buildDir}/google_play.json")
    serviceAccountEmail 'service-account-name@project-id.iam.gserviceaccount.com'
    pk12File file('/tmp/secret/key')
}

android {
    //https://developer.android.com/studio/releases/build-tools
    buildToolsVersion "28.0.3"
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.coinninja.coinkeeper"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode APP_VERSION
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        buildConfigField "int", "AUTHENTICATION_TIME_OUT_MS", "30000"
        buildConfigField "long", "DUST_AMOUNT_SATOSHIS", "500"
        buildConfigField "int", "NUM_ADDRESSES_AHEAD", "10"
        buildConfigField "String", "DEFAULT_SALT", "\"${DEFAULT_SALT}\""
        buildConfigField "String", "PHONE_HASH_SALT", "\"${PHONE_HASH_SALT}\""
        buildConfigField "int", "PHONE_HASH_ITERATIONS", "${PHONE_HASH_ITERATIONS}"
    }

    signingConfigs {
        release {
            storeFile file("${project.projectDir}/${keystoreProperties['RELEASE_STORE_FILE']}")
            storePassword keystoreProperties['RELEASE_STORE_PASSWORD']
            keyAlias keystoreProperties['RELEASE_KEY_ALIAS']
            keyPassword keystoreProperties['RELEASE_KEY_PASSWORD']
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
            buildConfigField "String", "ANALYTICS_TOKEN", "\"${ANALYTICS_TOKEN_DEBUG}\""
            buildConfigField "boolean", "CN_DB_ENCRYPTION_ENABLED", "false"
            applicationIdSuffix ".debug"
            manifestPlaceholders = ["APP_LINKING_HOST": "dev.coinninja.net"]
            resValue "string", "app_version", "${defaultConfig.versionName}${versionNameSuffix}"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "ANALYTICS_TOKEN", "\"${ANALYTICS_TOKEN}\""
            buildConfigField "boolean", "CN_DB_ENCRYPTION_ENABLED", "true"
            testCoverageEnabled false
            manifestPlaceholders = ["APP_LINKING_HOST": "coinninja.com"]
            resValue "string", "app_version", "${defaultConfig.versionName}"
        }
    }

    flavorDimensions "dropbit"
    productFlavors {
        staging {
            dimension "dropbit"
            applicationId "com.coinninja.staging.coinkeeper"
            signingConfig signingConfigs.release
            buildConfigField "String", "COIN_NINJA_API_BASE", "\"${COIN_NINJA_API_BASE__STAGING}\""
            versionNameSuffix "-staging"
            buildConfigField "String", "FCM_APPLICATION_KEY", "\"${DEBUG_FCM_APP_KEY}\""
        }

        production {
            dimension "dropbit"
            applicationId "com.coinninja.coinkeeper"
            signingConfig signingConfigs.release
            buildConfigField "String", "COIN_NINJA_API_BASE", "\"${COIN_NINJA_API_BASE}\""
            buildConfigField "String", "FCM_APPLICATION_KEY", "\"${PROD_FCM_APP_KEY}\""
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions.unitTests.includeAndroidResources = true
    testOptions.unitTests.returnDefaultValues = true

    lintOptions {
        abortOnError true
        htmlReport true
        noLines false
    }
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            jvmArgs '-Xmx4096m'
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "debug") {
        def aptOutputDir = new File(buildDir, "generated/source/apt/${variant.unitTestVariant.dirName}")
        variant.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', "*.aar"], dir: 'libs')

    //TODO: are we packaging secured messaging incorrectly?
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation group: 'org.cryptonode.jncryptor', name: 'jncryptor', version: '1.0.1'

    implementation 'com.google.dagger:dagger:2.17'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    androidTestAnnotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    testAnnotationProcessor 'com.google.dagger:dagger-compiler:2.17'
    implementation 'com.google.dagger:dagger-android:2.17'
    implementation 'com.google.dagger:dagger-android-support:2.17'

    // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.17'

    // Libbitcoin
    implementation 'com.coinninja.libbitcoin:libbitcoinbindings-release:1.0.38898'
    implementation 'com.coinninja.messaging:cn_messaging-release:1.1.2'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation "com.google.android.material:material:1.1.0-alpha03"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'org.greenrobot:greendao:3.2.2'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.9@aar'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    implementation "com.journeyapps:zxing-android-embedded:3.3.0"
    implementation "com.google.zxing:core:3.3.0"
    implementation 'com.google.zxing:javase:3.3.0'
    implementation "com.googlecode.libphonenumber:libphonenumber:8.9.4"
    implementation 'commons-codec:commons-codec:1.10'
    implementation group: 'com.madgag.spongycastle', name: 'core', version: '1.58.0.0'
    implementation group: 'com.madgag.spongycastle', name: 'bcpkix-jdk15on', version: '1.58.0.0'
    implementation 'com.mixpanel.android:mixpanel-android:5.4.1'
    implementation 'com.google.firebase:firebase-messaging:17.4.0'
    implementation 'com.google.firebase:firebase-core:16.0.7'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.powermock:powermock-module-junit4:1.6.6"
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.6"
    testImplementation "org.powermock:powermock-api-mockito:1.6.6"
    testImplementation "org.powermock:powermock-classloading-xstream:1.6.6"
    testImplementation group: 'org.json', name: 'json', version: '20180130'

    // Robolectric
    testImplementation "org.robolectric:robolectric:3.8"
    //testImplementation "org.robolectric:robolectric:4.0.2"
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'

    //androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'androidx.annotation:annotation:1.0.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0-alpha4') {
        exclude module: 'support-annotations'
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-compat'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'

}

task packageReleaseDeliverable(dependsOn: "assembleRelease") << {
    def CURRENT_DATE = new Date().format('yyyy-MM-dd-hh:mm')

    def VERSION_NAME = android.defaultConfig.versionName
    def VERSION_CODE = android.defaultConfig.versionCode

    def GIT_BRANCH_NAME = gitWorkingBranch()
    def GIT_BRANCH_COMMIT = gitWorkingCommit()


    mkdir "${project.buildDir}/deliverables"
    File infoFile = file("${project.buildDir}/deliverables/info.txt")

    def infoMessage
    def newLine = "\n"

    infoMessage = "Build date          ${CURRENT_DATE}"
    infoMessage = infoMessage + newLine + "App version name    ${VERSION_NAME}"
    infoMessage = infoMessage + newLine + "App version code    ${VERSION_CODE}"
    infoMessage = infoMessage + newLine + "Git branch          ${GIT_BRANCH_NAME}"
    infoMessage = infoMessage + newLine + "Git commit          ${GIT_BRANCH_COMMIT}"

    logger.quiet(infoMessage)
    infoFile.text = infoMessage
}

def gitWorkingBranch() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git --git-dir=${rootDir}/.git
                               --work-tree=${rootDir}
                               rev-parse --abbrev-ref HEAD""".execute().text.trim()
    return workingBranch
}

def gitWorkingCommit() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git --git-dir=${rootDir}/.git
                               --work-tree=${rootDir}
                               rev-parse HEAD""".execute().text.trim()
    return workingBranch
}


apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'


# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "jacocoTestReport")
  end

  desc "Lints Project"
  lane :lint do
    gradle(task: "clean lint")
  end


  desc "Assemble a debug version of the app"
  lane :debug_build do
    gradle(task: "clean lintVitalProductionRelease lintVitalStagingRelease assembleDebug")
    apk_path = './app/build/outputs/apk/debug/app-debug.apk'
    changelog = changelog_from_git_commits(between: [ENV['PREVIOUS_DEPLOY_COMMIT'], 'HEAD'], pretty: '- %s')

    analyze_apk(
      android_home: ENV['ANDROID_HOME'],
      apk_path: apk_path
    )
    puts("Version name: #{lane_context[SharedValues::ANALYZE_APK_VERSION_NAME]}")
    puts("Package name: #{lane_context[SharedValues::ANALYZE_APK_PACKAGE_NAME]}")
    puts("Version code: #{lane_context[SharedValues::ANALYZE_APK_VERSION_CODE]}")
    puts("App name: #{lane_context[SharedValues::ANALYZE_APK_APP_NAME]}")
    puts("Minimum sdk: #{lane_context[SharedValues::ANALYZE_APK_MIN_SDK]}")
    puts("Apk size: #{lane_context[SharedValues::ANALYZE_APK_SIZE]} bytes")

    write_changelog(
      version_code: lane_context[SharedValues::ANALYZE_APK_VERSION_CODE],
      changelog: changelog
    )
  end

  desc "Create a manually installable APK"
  lane :apk do
    gradle(task: "clean packageReleaseDeliverable")
  end

  desc "Deploy a new verison to the Google Play internal tester channel"
  lane :internal do
    gradle(task: "clean packageReleaseDeliverable")
    changelog = changelog_from_git_commits
    # For some reason this isn't working as expected.
    # apk_path = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    apk_path = './app/build/outputs/apk/release/app-release.apk'
    changelog = changelog_from_git_commits(between: [ENV['PREVIOUS_DEPLOY_COMMIT'], 'HEAD'], pretty: '- %s', merge_commit_filtering: 'only_include_merges')

    analyze_apk(
      android_home: ENV['ANDROID_HOME'],
      apk_path: apk_path
    )
    puts("Version name: #{lane_context[SharedValues::ANALYZE_APK_VERSION_NAME]}")
    puts("Package name: #{lane_context[SharedValues::ANALYZE_APK_PACKAGE_NAME]}")
    puts("Version code: #{lane_context[SharedValues::ANALYZE_APK_VERSION_CODE]}")
    puts("App name: #{lane_context[SharedValues::ANALYZE_APK_APP_NAME]}")
    puts("Minimum sdk: #{lane_context[SharedValues::ANALYZE_APK_MIN_SDK]}")
    puts("Apk size: #{lane_context[SharedValues::ANALYZE_APK_SIZE]} bytes")

    write_changelog(
      version_code: lane_context[SharedValues::ANALYZE_APK_VERSION_CODE],
      changelog: changelog
    )
    upload_to_play_store(track: 'internal', apk: apk_path)
  end

  desc "Deploy a new version to the Google Play production channel"
  lane :deploy do
    gradle(task: "clean packageReleaseDeliverable")
    # We're not ready for this yet.
    #upload_to_play_store
  end

  desc "Write the changelog file for the PlayStore"
  private_lane :write_changelog do |options|
    changelog = options[:changelog]

    truncate_at = 500
    if changelog.length > truncate_at
      omission = '...'
      stop  = truncate_at - omission.length

      changelog = "#{changelog[0, stop]}#{omission}"
    end

    File.open("./metadata/android/en-US/changelogs/#{options[:version_code]}.txt", 'w') do |file|
      file.write changelog
    end
  end
end
